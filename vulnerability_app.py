import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Page configuration
st.set_page_config(
    page_title="Cybersecurity Vulnerability Prioritization",
    page_icon=":shield:",
    layout="wide"
)

st.title("Cybersecurity Vulnerability Prioritization Dashboard")

# Load data - Replace this with your data loading logic
@st.cache_data
def load_data():
    # Replace with actual data source after prioritization
    findings_df = pd.read_csv('sorted_findings.csv')  # Replace with your generated CSV or DataFrame
    return findings_df

data = load_data()

# Sidebar filters
st.sidebar.header("Filter Options")
severity_filter = st.sidebar.multiselect("Select Severity", options=data["risk_factor"].unique(), default=data["risk_factor"].unique())
status_filter = st.sidebar.multiselect("Select Status", options=data.get("status", []).unique(), default=data.get("status", []).unique()) if "status" in data.columns else []

# Applying filters
if status_filter:
    filtered_data = data[(data["risk_factor"].isin(severity_filter)) & (data["status"].isin(status_filter))]
else:
    filtered_data = data[data["risk_factor"].isin(severity_filter)]

# Display data table
st.subheader("Prioritized Vulnerabilities")
st.dataframe(filtered_data)

# Visualization 1: Top Prioritized Findings
st.subheader("Top Prioritized Findings by Total Score")
top_findings = filtered_data.sort_values(by='total_score', ascending=False).head(10)
fig_top_findings = px.bar(top_findings, x='flaw_id', y='total_score', color='risk_factor', title='Top 10 Prioritized Findings')
st.plotly_chart(fig_top_findings)

# Visualization 2: Distribution by Risk Factor
st.subheader("Distribution of Vulnerabilities by Risk Factor")
fig_risk_distribution = px.histogram(filtered_data, x='risk_factor', color='risk_factor', title='Distribution by Risk Factor')
st.plotly_chart(fig_risk_distribution)

# Visualization 3: Risk Score vs Asset Criticality
if 'criticality' in filtered_data.columns:
    st.subheader("Risk Score vs Asset Criticality")
    fig_risk_vs_criticality = px.scatter(filtered_data, x='criticality', y='total_score', color='risk_factor', size='total_score', hover_data=['flaw_id'])
    st.plotly_chart(fig_risk_vs_criticality)

# Display recommendations based on prioritization
st.sidebar.info("Adjust filters to explore different vulnerability prioritization insights.")
